Extracting Stock information with yfinance

# Installing Packs ans Libraries 1/2
!pip install yfinance
!pip install pandas
!pip install bs4
!pip install html5lib
!pip install lxml
!pip install plotly

# Installing Packs ans Libraries 2/2
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Using yfinance to extract information
tesla = yf.Ticker("TSLA")
gme = yf.Ticker("GME")

# Extracting Share Prices
tesla_data = tesla.history(period="max")
gme_data = gme.history(period="max")

# Reset Index 1/2 and show DataFrame
# Tesla DataFrame
tesla_data.reset_index(inplace=True)
tesla_data.head()

# Reset Index 2/2 and show DataFrame
# GME DataFrame
gme_data.reset_index(inplace=True)
gme_data.head()


Extracting Stock information with Web Scraping

# Extract Web information 1/7
url_tesla_revenue = 'https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'
url_gme_revenue = 'https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue'

# Extract Web information 2/7
tesla_request = requests.get(url_tesla_revenue).text
gme_request = requests.get(url_gme_revenue).text

# Extract Web information 3/7
soup_tesla = BeautifulSoup(tesla_request,'html5lib')
soup_gme = BeautifulSoup(gme_request,'html5lib')

# Extract Web information 4/7
# Turn the html table into a pandas dataframe
tesla_revenue = pd.DataFrame(columns=['Date','Revenue'])

# First we isolate the body of the table which contains all the information
# Then we loop through each row and find all the column values for each row
for row in soup_tesla.find_all('tbody')[1].find_all('tr'):
    col = row.find_all('td')
    date = col[0].text
    revenue = col[1].text
    
    # Finally we append the data of each row to the table
    tesla_revenue = tesla_revenue.append({'Date':date,'Revenue':revenue},ignore_index=True)

# Extract Web information 5/7
# Turn the html table into a pandas dataframe
gme_revenue = pd.DataFrame(columns=['Date','Revenue'])

# First we isolate the body of the table which contains all the information
# Then we loop through each row and find all the column values for each row
for row in soup_gme.find_all('tbody')[1].find_all('tr'):
    col = row.find_all('td')
    date = col[0].text
    revenue = col[1].text
    
    # Finally we append the data of each row to the table
    gme_revenue = gme_revenue.append({'Date':date,'Revenue':revenue},ignore_index=True)

# Extract Web information 6/7
# Remove "comma" ans "dollar" signs
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"")

# Extract Web information 7/7
# Remove an null or empty strings
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
gme_revenue = gme_revenue[gme_revenue['Revenue'] != ""]

# Tesla Revenue DataFrame
tesla_revenue.tail()

# GME Revenue DataFrame
gme_revenue.tail()

# Define Graphing Function
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()

# Tesla Dashboard
make_graph(tesla_data,tesla_revenue,"Tesla")

# Tesla Dashboard
make_graph(gme_data,gme_revenue,"GME")





